// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package db

import (
	"context"
)

const findAllWords = `-- name: FindAllWords :many
SELECT id, name
FROM words
`

func (q *Queries) FindAllWords(ctx context.Context) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, findAllWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSimilarWordsById = `-- name: FindSimilarWordsById :many
SELECT w.id, w.name, sw.similarity
FROM similar_words sw
         JOIN words w on w.id = sw.word_similar_id
WHERE sw.word_id = ?
ORDER BY sw.similarity DESC
`

type FindSimilarWordsByIdRow struct {
	ID         int64
	Name       string
	Similarity float64
}

func (q *Queries) FindSimilarWordsById(ctx context.Context, wordID int64) ([]FindSimilarWordsByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, findSimilarWordsById, wordID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindSimilarWordsByIdRow
	for rows.Next() {
		var i FindSimilarWordsByIdRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Similarity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findWordById = `-- name: FindWordById :one
SELECT id, name
FROM words
WHERE id = ?
LIMIT 1
`

func (q *Queries) FindWordById(ctx context.Context, id int64) (Word, error) {
	row := q.db.QueryRowContext(ctx, findWordById, id)
	var i Word
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findWordByName = `-- name: FindWordByName :one
SELECT id, name
FROM words
WHERE name = ?
LIMIT 1
`

func (q *Queries) FindWordByName(ctx context.Context, name string) (Word, error) {
	row := q.db.QueryRowContext(ctx, findWordByName, name)
	var i Word
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
